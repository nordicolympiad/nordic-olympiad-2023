#!/usr/bin/env bash
PPATH=$(realpath ..)
. ../../../testdata_tools/gen.sh

use_solution bjarki_scc_nlogn_100.cpp

compile random_generator.py
compile shakespeare.py
compile path_many_weights.py
compile star.py
compile loop.py

samplegroup
sample 1
sample 2
sample 3

# m_i = 1, k = 1
group GA 5
for i in {01..10}; do
tc GA-$i random_generator 100 100 1 100 100 1
done
tc GA-11 random_generator 98 100 1 96 96 1
tc GA-12 random_generator 100 100 2 100 100 1
tc GA-13 random_generator 100 100 3 100 100 1
tc GA-14 random_generator 100 100 4 100 100 1 
tc GA-15 random_generator 100 100 5 100 100 1
tc GA-16 random_generator 100 100 6 100 100 1
tc GA-17 random_generator 100 100 7 100 100 1
tc GA-18 random_generator 65 100 8 78 78 1
tc GA-19 random_generator 57 100 9 99 99 1
tc GA-20 random_generator 99 100 10 97 97 1

# m_i = 1
group GB 7
include_group GA
tc GB-01 random_generator 500000 100000 1 100000 100000 1
tc GB-02 random_generator 500000 100000 3 100000 100000 1
tc GB-03 random_generator 500000 100000 5 100000 100000 1
tc GB-04 random_generator 500000 100000 10 100000 100000 1

# complete search
group GC 17
tc GC-01 random_generator 2 100 1 10 70 6
tc GC-02 random_generator 3 100 1 10 70 6
tc GC-03 random_generator 4 100 1 10 70 6
tc GC-04 random_generator 5 100 1 10 70 6
tc GC-05 random_generator 6 100 1 10 70 6
tc GC-06 random_generator 3 100 2 10 70 6
tc GC-07 random_generator 4 100 2 10 70 6
tc GC-08 random_generator 5 100 2 10 70 6
tc GC-09 random_generator 6 100 2 10 70 6
tc GC-10 random_generator 4 100 3 10 70 6
tc GC-11 random_generator 5 100 3 10 70 6
tc GC-12 random_generator 6 100 3 10 70 6
tc GC-13 random_generator 5 100 4 10 70 6
tc GC-14 random_generator 6 100 4 10 70 6
tc GC-15 random_generator 6 100 5 10 70 6

# DP O(n*M)
group GD 18
include_group GA
include_group GC
tc GD-01 random_generator 50 10 1 100 5000 5*10**5
tc GD-02 random_generator 50 10 2 100 5000 5*10**5
tc GD-03 random_generator 50 10 3 100 5000 5*10**5
tc GD-04 random_generator 50 10 4 100 5000 5*10**5
tc GD-06 random_generator 500 10 1 100 5000 5*10**5
tc GD-08 random_generator 500 10 3 100 5000 5*10**5
tc GD-09 random_generator 500 10 4 100 5000 5*10**5
tc GD-10 random_generator 500 10 5 100 5000 5*10**5
tc GD-11 random_generator 5000 10 1 100 5000 5*10**5
tc GD-12 random_generator 5000 10 2 100 5000 5*10**5
tc GD-13 random_generator 5000 10 3 100 5000 5*10**5
tc GD-15 random_generator 5000 10 5 100 5000 5*10**5
tc GD-16 random_generator 5000 100 1 100 5000 5*10**5
tc GD-17 random_generator 5000 100 2 100 5000 5*10**5
tc GD-19 random_generator 5000 100 4 100 5000 5*10**5
tc GD-20 random_generator 5000 100 5 100 5000 5*10**5
tc GD-21 random_generator 5000 100 10 5000 5000 5*10**5

tc GD-22 path_many_weights 5000 left 100 5000 even
tc GD-23 path_many_weights 5000 right 100 5000 even
tc GD-24 path_many_weights 5000 left 100 5000 uniform
tc GD-25 path_many_weights 5000 right 100 5000 uniform

# Binary search + SCC + Longest path O(q*n*log(n))
group GE 24
include_group GC
tc GE-01 random_generator 500000 10 1 10 500000 5*10**5
tc GE-02 random_generator 500000 10 2 10 500000 5*10**5
tc GE-03 random_generator 500000 10 3 10 500000 5*10**5
tc GE-07 random_generator 500000 10 7 10 500000 5*10**5
tc GE-08 random_generator 500000 10 8 10 500000 5*10**5
tc GE-09 random_generator 500000 10 9 10 500000 5*10**5
tc GE-10 random_generator 500000 10 10 10 500000 5*10**5
tc GE-11 random_generator 413678 10 10 9 372658 5*10**5

# SCC + Longest path for each unique weight O(n * sqrt(n))
group GF 16
include_group GD
tc GF-01 random_generator 100000 10 1 100000 500000 5*10**5
tc GF-02 random_generator 100000 10 2 100000 500000 5*10**5
tc GF-03 random_generator 100000 10 3 100000 500000 5*10**5
tc GF-04 random_generator 100000 10 4 100000 500000 5*10**5
tc GF-05 random_generator 100000 10 5 100000 500000 5*10**5
tc GF-06 random_generator 100000 10 6 100000 500000 5*10**5
tc GF-07 random_generator 100000 10 7 100000 500000 5*10**5
tc GF-08 random_generator 100000 10 8 100000 500000 5*10**5
tc GF-09 random_generator 100000 10 9 100000 500000 5*10**5
tc GF-10 random_generator 100000 10 10 100000 500000 5*10**5
tc GF-11 random_generator 93678 10 10 43762 392658 5*10**5

# SCC + Longest path for each unique weight with clever observation O(n * log(n))
group GG 13
include_group GB
include_group GE
include_group GF
tc GG-01 random_generator 500000 100000 1 1 100000 5*10**5
tc GG-03 random_generator 500000 100000 1 4 100000 5*10**5
tc GG-06 random_generator 500000 100000 1 100 100000 5*10**5
tc GG-08 random_generator 500000 10000 1 2 100000 5*10**5
tc GG-14 random_generator 500000 1000 1 2 100000 5*10**5
tc GG-17 random_generator 500000 1000 1 10 100000 5*10**5
tc GG-19 random_generator 500000 100 1 1 100000 5*10**5
tc GG-24 random_generator 500000 100 1 100 100000 5*10**5
tc GG-29 random_generator 500000 100000 2 10 100000 5*10**5
tc GG-32 random_generator 500000 10000 2 2 100000 5*10**5
tc GG-42 random_generator 500000 1000 2 100 100000 5*10**5
tc GG-44 random_generator 500000 100 2 2 100000 5*10**5
tc GG-49 random_generator 500000 100000 3 1 100000 5*10**5
tc GG-65 random_generator 500000 1000 3 10 100000 5*10**5
tc GG-68 random_generator 500000 100 3 2 100000 5*10**5
tc GG-72 random_generator 500000 100 10 100 100000 5*10**5

tc GG-73 shakespeare 500000 1 100 100000
tc GG-101 shakespeare 500000 10 1000 100000

tc GG-103 path_many_weights 500000 left 100 100000 even
tc GG-104 path_many_weights 500000 right 100 100000 even
tc GG-105 path_many_weights 500000 left 100 100000 uniform
tc GG-106 path_many_weights 500000 right 100 100000 uniform
tc GG-107 path_many_weights 500000 left 1000 100000 even
tc GG-108 path_many_weights 500000 right 1000 100000 even
tc GG-109 path_many_weights 500000 left 1000 100000 uniform
tc GG-110 path_many_weights 500000 right 1000 100000 uniform
tc GG-111 path_many_weights 500000 left 10000 100000 even
tc GG-112 path_many_weights 500000 right 10000 100000 even
tc GG-113 path_many_weights 500000 left 10000 100000 uniform
tc GG-114 path_many_weights 500000 right 10000 100000 uniform
tc GG-115 path_many_weights 500000 left 100000 100000 even
tc GG-116 path_many_weights 500000 right 100000 100000 even

#tc GB-103 path_many_weights 500000 left 100 100000 even
#tc GB-104 path_many_weights 500000 right 100 100000 even
#tc GB-105 path_many_weights 500000 left 100 100000 uniform
#tc GB-106 path_many_weights 500000 right 100 100000 uniform
#tc GB-107 path_many_weights 500000 left 1000 100000 even
#tc GB-108 path_many_weights 500000 right 1000 100000 even
#tc GB-109 path_many_weights 500000 left 1000 100000 uniform
#tc GB-110 path_many_weights 500000 right 1000 100000 uniform
#tc GB-111 path_many_weights 500000 left 10000 100000 even
#tc GB-112 path_many_weights 500000 right 10000 100000 even
#tc GB-113 path_many_weights 500000 left 10000 100000 uniform
#tc GB-114 path_many_weights 500000 right 10000 100000 uniform
#tc GB-115 path_many_weights 500000 left 100000 100000 even
#tc GB-116 path_many_weights 500000 right 100000 100000 even

# tc GB-117 star 500000 2 2 100000 500000
# tc GB-118 star 500000 4 4 100000 500000
# tc GB-119 star 500000 7 7 100000 500000
# tc GB-120 star 500000 13 13 100000 500000
# tc GB-121 star 500000 17 4 100000 500000
# tc GB-122 star 500000 32 5 100000 500000
# tc GB-123 star 500000 50 4 100000 500000
# tc GB-124 star 500000 80 8 100000 500000
# tc GB-125 star 500000 4 17 100000 500000
# tc GB-126 star 500000 5 32 100000 500000
# tc GB-127 star 500000 4 50 100000 500000
# tc GB-128 star 500000 8 80 100000 500000

# tc GB-129 loop 500000 1 1 100000 500000
# tc GB-130 loop 500000 2 1 100000 500000
# tc GB-131 loop 500000 3 1 100000 500000
# tc GB-132 loop 500000 10 1 100000 500000
# tc GB-133 loop 500000 1 10 100000 500000
# tc GB-134 loop 500000 2 10 100000 500000
# tc GB-135 loop 500000 3 10 100000 500000
# tc GB-136 loop 500000 10 10 100000 500000

